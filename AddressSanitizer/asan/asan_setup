#!/bin/bash

set -e

HERE="$(cd "$(dirname "$0")" && pwd)"

revert=no
extra_options=
device=
lib=
package=

#./asan_setup --package com.example.test --extra-options detect_leaks=1,suppressions=/system/lib/egl/libEGL_tegra.so
function usage {
    echo "usage: $0 [--revert] [--device device-id] [--lib path] [--extra-options options] --package"
    echo "  --revert: Uninstall ASan from the device."
    echo "  --lib: Path to ASan runtime library."
    echo "  --extra-options: Extra ASAN_OPTIONS."
    echo "  --package: The application package name."
    echo "  --device: Install to the given device. Use 'adb devices' to find"
    echo "            device-id."
    echo
    exit 1
}

function get_device_arch { # OUTVAR
    local _outvar=$1
    local _ABI=$($ADB shell getprop ro.product.cpu.abi)
    local _ARCH=
    if [[ $_ABI == x86* ]]; then
        _ARCH=i686
    elif [[ $_ABI == armeabi* ]]; then
        _ARCH=arm
    else
        echo "Unrecognized device ABI: $_ABI"
        exit 1
    fi
    eval $_outvar=\$_ARCH
}

while [[ $# > 0 ]]; do
  case $1 in
    --revert)
      revert=yes
      ;;
    --extra-options)
      shift
      if [[ $# == 0 ]]; then
        echo "--extra-options requires an argument."
        exit 1
      fi
      extra_options="$1"
      ;;
    --lib)
      shift
      if [[ $# == 0 ]]; then
        echo "--lib requires an argument."
        exit 1
      fi
      lib="$1"
      ;;
    --package)
      shift
      if [[ $# == 0 ]]; then
        echo "--package requires an argument."
        exit 1
      fi
      package="$1"
      ;;
    --device)
      shift
      if [[ $# == 0 ]]; then
        echo "--device requires an argument."
        exit 1
      fi
      device="$1"
      ;;
    *)
      usage
      ;;
  esac
  shift
done

ADB=${ADB:-adb}
if [[ x$device != x ]]; then
    ADB="$ADB -s $device"
fi

$ADB shell am force-stop $package

echo '>> Remounting /system rw'
$ADB root
$ADB wait-for-device
$ADB remount
$ADB wait-for-device

get_device_arch ARCH
echo "Target architecture: $ARCH"
ASAN_RT="libclang_rt.asan-$ARCH-android.so"

if [[ x$revert == xyes ]]; then
    echo '>> Uninstalling ASan'
    $ADB shell rm /system/bin/asanwrapper
    $ADB shell rm /system/lib/$ASAN_RT
    $ADB shell setprop wrap.$package ""
    echo '>> Restarting shell'
    $ADB shell stop
    $ADB shell start
    echo '>> Done'
    exit 0
fi

if [[ -d "$lib" ]]; then
    ASAN_RT_PATH="$lib"
elif [[ -f "$lib" && "$lib" == *"$ASAN_RT" ]]; then
    ASAN_RT_PATH=$(dirname "$lib")
elif [[ -f "$HERE/$ASAN_RT" ]]; then
    ASAN_RT_PATH="$HERE"
elif [[ $(basename "$HERE") == "bin" ]]; then
    # We could be in the toolchain's base directory.
    # Consider ../lib, ../lib/asan, ../lib/linux and ../lib/clang/$VERSION/lib/linux.
    P=$(ls "$HERE"/../lib/"$ASAN_RT" "$HERE"/../lib/asan/"$ASAN_RT" "$HERE"/../lib/linux/"$ASAN_RT" "$HERE"/../lib/clang/*/lib/linux/"$ASAN_RT" 2>/dev/null | sort | tail -1)
    if [[ -n "$P" ]]; then
        ASAN_RT_PATH="$(dirname "$P")"
    fi
fi

if [[ -z "$ASAN_RT_PATH" || ! -f "$ASAN_RT_PATH/$ASAN_RT" ]]; then
    echo ">> ASan runtime library not found"
    exit 1
fi

TMPDIRBASE=$(mktemp -d)
TMPDIR="$TMPDIRBASE/new"
mkdir $TMPDIR

echo "TMPDIRBASE: $TMPDIRBASE"
echo "TMPDIR: $TMPDIR"

cp "$ASAN_RT_PATH/$ASAN_RT" "$TMPDIR/"

# FIXME: alloc_dealloc_mismatch=0 prevents a failure in libdvm startup,
# which may or may not be a real bug (probably not).
ASAN_OPTIONS=alloc_dealloc_mismatch=0,start_deactivated=1

# On Android-L not allowing user segv handler breaks some applications.
if $ADB shell 'echo $LD_PRELOAD' | grep libsigchain.so >&/dev/null; then
    ASAN_OPTIONS="$ASAN_OPTIONS,allow_user_segv_handler=1"
fi

if [[ x$extra_options != x ]] ; then
    ASAN_OPTIONS="$ASAN_OPTIONS,$extra_options"
fi

cat <<EOF >"$TMPDIR/asanwrapper"
#!/system/bin/sh
ASAN_OPTIONS=$ASAN_OPTIONS \\
LD_PRELOAD=\$LD_PRELOAD:$ASAN_RT \\
exec \$@
EOF

echo '>> Pushing files to the device'
$ADB push "$TMPDIR/$ASAN_RT" /system/lib/
$ADB push "$TMPDIR/asanwrapper" /system/bin/asanwrapper

$ADB shell chown root.shell /system/lib/"$ASAN_RT" /system/bin/asanwrapper
$ADB shell chmod 644 /system/lib/"$ASAN_RT"
$ADB shell chmod 755 /system/bin/asanwrapper

$ADB shell setenforce 0 #disable SELinux
#$ADB shell su -c "setprop wrap.$package 'logwrapper asanwrapper'"
$ADB shell su -c "setprop wrap.$package 'asanwrapper'"
echo "wrap.$package: $(adb shell getprop wrap.$package)"
rm -r "$TMPDIRBASE"
# echo '>> Restarting shell (asynchronous)'
# echo '>> Please wait until the device restarts'
# $ADB shell stop
# $ADB shell start

